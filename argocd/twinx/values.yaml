# ~/Git/TwinX/argocd/twinx
# Argo CD 관련 전역 설정
argo:
    namespace: argocd
    project: default
    server: https://kubernetes.default.svc
    sourceRepo:
        url: https://github.com/mj006648/TwinX.git
        branch: main


# 개별 애플리케이션 설정
applications:
    # 단순 yaml 파일들로 관리되는 애플리케이션
    # 첫 번째 애플리케이션
    cluster-config:
      enabled: false
      namespace: default
      syncWave: "-1"
      source:
        path: "argocd/twinx/apps/cluster-config"
    
    metallb-resources:
      enabled: true
      namespace: metallb-system
      syncWave: "1"
      source:
        path: "argocd/twinx/apps/metallb-resources"
   
    gpu-operator:
      enabled: true
      namespace: gpu-operator # Operator와 관련 컴포넌트를 설치할 네임스페이스
      syncWave: "2"
      source:
        type: helm
        repoURL: https://helm.ngc.nvidia.com/nvidia  # NVIDIA 공식 Helm 리포지토리
        chart: gpu-operator
        # Helm 차트 버전을 공식 문서에 나온 안정 버전으로 명시합니다.
        targetRevision: "v25.3.2"
        helm:
          releaseName: gpu-operator
          valueFiles:
            # 1단계에서 생성한 상세 설정 파일의 경로를 지정합니다.
            - "argocd/twinx/apps/gpu-operator/values.yaml"
      syncOptions:
        # gpu-operator 네임스페이스가 없다면 ArgoCD가 자동으로 생성합니다.
        - CreateNamespace=true      
    
    # Grafana Secret을 가장 먼저 배포
    grafana-resources:
      enabled: false
      namespace: monitoring
      syncWave: "17" # Prometheus보다 먼저 실행되어야 함
      source:
        path: "argocd/twinx/apps/grafana-resources"      

    twinx-web:
      enabled: true
      namespace: tx-service
      syncWave: "22"
      source:
        path: "argocd/twinx/apps/twinx-web"
    
    # Helm 차트로 관리되는 애플리케이션
    metallb:
        enabled: true
        namespace: metallb-system
        syncWave: "0"
        source:
            type: helm
            repoURL: https://metallb.github.io/metallb
            chart: metallb
            targetRevision: 0.15.2
            helm:
                valueFiles:
                    - "argocd/twinx/apps/metallb/values.yaml"

    # Prometheus 스택 배포
    prometheus:
      enabled: false
      namespace: monitoring
      syncWave: "18" # Secret이 준비된 후 실행
      source:
        type: helm
        repoURL: https://prometheus-community.github.io/helm-charts
        chart: prometheus
        targetRevision: 27.32.0
        helm:
          valueFiles:
            - "argocd/twinx/apps/prometheus/values.yaml"

    # Grafana 배포
    grafana:
      enabled: false
      namespace: monitoring
      syncWave: "19" # Secret과 Prometheus가 모두 준비된 후 실행
      source:
        type: helm
        repoURL: https://grafana.github.io/helm-charts
        chart: grafana
        targetRevision: 9.3.4
        helm:
          valueFiles:
            - "argocd/twinx/apps/grafana/values.yaml"

    csi-driver-nfs:
      enabled: true
      namespace: kube-system  # 드라이버가 설치될 네임스페이스
      syncWave: "3"
      source:
        type: helm
        repoURL: https://raw.githubusercontent.com/kubernetes-csi/csi-driver-nfs/master/charts
        chart: csi-driver-nfs
        targetRevision: 4.11.0
        helm:
          valueFiles:
            - "argocd/twinx/apps/csi-driver-nfs/values.yaml"
    # Wave 1: Operator 배포 (헬름)
    rook-ceph-operator:
      enabled: false
      namespace: rook-ceph
      syncWave: "4"
      source:
        repoURL: https://charts.rook.io/release
        chart: rook-ceph
        targetRevision: v1.17.6
        helm:
          valueFiles:
            - "argocd/twinx/apps/rook-ceph-operator/values.yaml"

    # Wave 2: Ceph 클러스터 "자체"만 배포 (헬름)
    rook-ceph-cluster:
      enabled: false
      namespace: rook-ceph
      syncWave: "5"
      source:
        repoURL: https://charts.rook.io/release
        chart: rook-ceph-cluster
        targetRevision: v1.17.6
        helm:
          valueFiles:
            - "argocd/twinx/apps/rook-ceph-cluster/values.yaml"

    # Wave 3: 클러스터가 준비된 후, 스토리지 리소스와 툴박스를 배포 (YAML)
    rook-ceph-resources:
      enabled: false
      namespace: rook-ceph # 리소스들이 생성될 기본 네임스페이스
      syncWave: "6"
      source:
        path: "argocd/twinx/apps/rook-ceph-resources"
      # 동기화 옵션을 설정하여 서버 측에서 추가된 필드를 무시하도록 합니다.
      syncOptions:
        - ServerSideApply=true

    accumulation:
      enabled: false
      # 이 애플리케이션이 관리하는 리소스들이 생성될 기본 네임스페이스
      namespace: accumulation
      syncWave: "7"
      source:
        path: "argocd/twinx/apps/accumulation"

    postgresql:
      enabled: false
      namespace: postgre
      syncWave: "8"
      source:
        type: helm
        repoURL: https://charts.bitnami.com/bitnami
        chart: postgresql
        #-- 안정적인 배포를 위해 차트 버전을 명시합니다.
        targetRevision: "16.7.27"
        helm:
          valueFiles:
            - "argocd/twinx/apps/postgresql/values.yaml"

    nessie:
      enabled: false
      namespace: nessie-ns
      syncWave: "9" # PostgreSQL 이후에 배포되도록 설정
      source:
        type: helm
        repoURL: https://charts.projectnessie.org
        chart: nessie
        releaseName: nessie # Helm 릴리스 이름을 'nessie'로 고정
        targetRevision: "0.104.9"
        helm:
          valueFiles:
            - "argocd/twinx/apps/nessie/values.yaml"
      syncOptions:
        - CreateNamespace=true # ArgoCD가 네임스페이스를 자동으로 생성

    nessie-resources:
      enabled: false
      namespace: nessie-ns
      syncWave: "10" # nessie Helm 차트와 동시에 배포
      source:
        path: "argocd/twinx/apps/nessie-resources"
        directory:
          # values.yaml을 제외한 나머지 YAML 파일들만 배포 대상으로 지정
          exclude: "values.yaml"
          recurse: true
      syncOptions:
        - CreateNamespace=true

    confluent-operator:
      enabled: false
      namespace: confluent
      syncWave: "11"
      source:
        type: helm
        repoURL: https://packages.confluent.io/helm
        chart: confluent-for-kubernetes
        targetRevision: 0.1263.8 # 최신 버전 명시
        helm:
          valueFiles:
            - "argocd/twinx/apps/confluent-operator/values.yaml"

    # (Operator가 생성된 후, CRD들이 배포되도록)
    confluent-platform:
      enabled: false
      namespace: confluent # 모든 컴포넌트는 confluent 네임스페이스에 배포
      syncWave: "12"
      source:
        path: "argocd/twinx/apps/confluent-platform"

    # (플랫폼이 완전히 준비된 후)
    confluent-resources:
      enabled: false
      namespace: confluent
      syncWave: "13"
      source:
        path: "argocd/twinx/apps/confluent-resources"
    
    spark-operator: # (기존 spark-operator-helm에서 이름 변경)
      enabled: true
      namespace: spark-operator
      syncWave: "14"
      source:
        type: helm
        repoURL: https://kubeflow.github.io/spark-operator
        chart: spark-operator
        targetRevision: "1.3.2" # 최신 버전으로 업데이트 (권장)
        helm:
          releaseName: spark-operator
          valueFiles:
            - "argocd/twinx/apps/spark-operator/values.yaml"
      syncOptions:
        - CreateNamespace=true

    # Wave 15: Spark 잡을 위한 RBAC, Secret 및 스크립트 ConfigMap
    spark-job-configs:
      enabled: true
      namespace: spark-operator
      syncWave: "15"
      source:
        path: "argocd/twinx/apps/job-configs"

    # Wave 16: 모든 Spark 애플리케이션(현재는 스트리밍 잡 하나)을 관리
    spark-applications: # (기존 spark-job-schedules에서 이름 변경)
      enabled: false
      namespace: spark-operator
      syncWave: "16"
      source:
        path: "argocd/twinx/apps/job-schedules"

    superset:
      enabled: false
      namespace: superset
      syncWave: "20" # 다른 모든 인프라가 준비된 후 배포
      source:
        type: helm
        repoURL: https://charts.bitnami.com/bitnami
        chart: superset
        #-- 안정적인 배포를 위해 차트 버전을 명시하는 것이 좋습니다.
        #-- 5.0.0 버전이 최신 버전 중 하나입니다.
        targetRevision: "5.0.0"
        helm:
          releaseName: superset # Helm 릴리스 이름을 'superset'으로 고정
          valueFiles:
            - "argocd/twinx/apps/superset/values.yaml"
      syncOptions:
        - CreateNamespace=true # ArgoCD가 'superset' 네임스페이스를 자동으로 생성

    trino:
      enabled: false
      namespace: trino # Trino 컴포넌트를 설치할 네임스페이스
      syncWave: "21"
      source:
        type: helm
        repoURL: https://trinodb.github.io/charts/  # Trino 공식 Helm 리포지토리
        chart: trino
        # [수정] Helm 차트 버전을 확인된 최신 버전으로 명시합니다.
        targetRevision: "1.40.0"
        helm:
          releaseName: trino
          valueFiles:
            # 1단계에서 생성한 상세 설정 파일의 경로를 지정합니다.
            - "argocd/twinx/apps/trino/values.yaml"
      syncOptions:
        # trino 네임스페이스가 없다면 ArgoCD가 자동으로 생성합니다.
        - CreateNamespace=true

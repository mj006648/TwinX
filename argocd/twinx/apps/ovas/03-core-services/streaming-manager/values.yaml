# ./argocd/twinx/apps/ovas/03-core-services/streaming-manager/values.yaml
global:
  ingress:
    annotations:
      # AWS(alb) 관련 어노테이션은 모두 제거하고, 온프레미스에서 일반적으로 사용하는 NGINX 기준으로 수정합니다.
      # 필요에 따라 Ingress Controller에 맞는 어노테이션을 추가할 수 있습니다.
      nginx.ingress.kubernetes.io/proxy-body-size: "0"
      nginx.ingress.kubernetes.io/proxy-read-timeout: "600"
      nginx.ingress.kubernetes.io/proxy-send-timeout: "600"

      kubernetes.io/ingress.class: "nginx-streaming"
      # Ingress Controller를 NGINX로 지정합니다.
      className: nginx-streaming

      # 1. CORS 기능 활성화
      nginx.ingress.kubernetes.io/enable-cors: "true"
      # 2. 모든 출처(Origin)를 허용 ('*'는 모든 곳을 의미)
      nginx.ingress.kubernetes.io/cors-allow-origin: "*"
      # 3. 허용할 HTTP 메소드 지정
      nginx.ingress.kubernetes.io/cors-allow-methods: "GET, POST, OPTIONS, PUT, DELETE"
      # 4. 허용할 HTTP 헤더 지정
      nginx.ingress.kubernetes.io/cors-allow-headers: "Content-Type, Authorization"

  # 레지스트리 시크릿은 그대로 사용합니다. (nvcr.io 인증에 필요)
  imagePullSecrets:
   - name: regcred

streaming:
  ingress:
    path: "/"
    pathType: Prefix
    enabled: true

  serviceConfig:
    root_path: ""
    prefix_url: "/streaming"

    session_namespace: "omni-streaming"
    session_capacity: 5
    backend_rmcp_url: "http://rmcp/rmcp"
    backend_applications_resolver_url: "http://resolver"

    # --- 도메인 및 TLS가 없는 환경을 위한 설정 ---
    # backend_csp_cls는 Generic으로 유지하고, backend_csp_args를 수정합니다.
    backend_csp_cls: "nv.svc.streaming._csp.Ingress"
    backend_csp_args:
      # wss (보안 웹소켓)를 비활성화합니다.
      enable_wss: false
      # base_domain을 빈 값으로 설정합니다잇
      base_domain: ""

  image:
    repository: "nvcr.io/nvidia/omniverse/kit-appstreaming-manager"
    pullPolicy: Always
    # tag는 OVAs 문서의 기준 버전을 사용하는 것이 좋습니다.
    tag: 1.10.1

  monitoring:
    # ServiceMonitor를 생성하려면 이전에 설치한 Prometheus CRD가 필요합니다.
    enabled: false
    prometheusNamespace: "monitoring"


apiVersion: platform.confluent.io/v1beta1
kind: ControlCenter
metadata:
  name: controlcenter
  namespace: confluent
spec:
  #-- Control Center 인스턴스 개수
  replicas: 1

  #-- Control Center 내부 데이터(상태 정보 등)를 저장할 볼륨의 크기
  dataVolumeCapacity: 10Gi

  #-- 사용할 StorageClass 이름
  storageClass:
    name: rook-ceph-block-kafka

  #-- 사용할 Docker 이미지 버전
  image:
    application: confluentinc/cp-enterprise-control-center:7.9.2
    init: confluentinc/confluent-init-container:2.11.2

  #-- Control Center가 의존하는 다른 서비스들의 접속 정보
  dependencies:
    kafka:
      # Kafka 클러스터의 내부 서비스 주소
      bootstrapEndpoint: kafka.confluent.svc.cluster.local:9071
    schemaRegistry:
      # Schema Registry의 내부 서비스 주소
      url: http://schemaregistry.confluent.svc.cluster.local:8081
    ksqldb:
      # ksqlDB 클러스터의 내부 서비스 주소
      - name: ksqlDB-Prod  # Control Center UI에 표시될 ksqlDB 클러스터의 이름
        url: http://ksqldb.confluent.svc.cluster.local:8088

  #############################################################################
  # ★★★★★ 파드 안정성을 위한 Liveness & Readiness Probe 설정 추가 ★★★★★
  # Control Center는 시작하는 데 시간이 다소 걸리므로,
  # 쿠버네티스가 파드가 비정상이라고 너무 빨리 판단하지 않도록
  # Probe의 초기 대기 시간을 넉넉하게 설정합니다.
  #############################################################################
  probe:
    # Liveness Probe: 파드 내의 애플리케이션이 살아있는지(Deadlock 등은 아닌지) 검사
    liveness:
      # 파드가 시작되고 180초(3분)가 지난 후에 첫 번째 Probe를 시작합니다.
      initialDelaySeconds: 180
      # 15초마다 Probe를 실행합니다.
      periodSeconds: 15
      # Probe의 응답을 최대 10초까지 기다립니다.
      timeoutSeconds: 10
      # 5번 연속 실패할 경우, 파드를 비정상으로 간주하고 재시작합니다.
      failureThreshold: 5

    # Readiness Probe: 파드가 외부로부터 트래픽을 받을 준비가 되었는지 검사
    readiness:
      # 파드가 시작되고 180초(3분)가 지난 후에 첫 번째 Probe를 시작합니다.
      initialDelaySeconds: 180
      # 15초마다 Probe를 실행합니다.
      periodSeconds: 15
      # Probe의 응답을 최대 10초까지 기다립니다.
      timeoutSeconds: 10
      # 5번 연속 실패할 경우, 파드를 'NotReady' 상태로 만들어 서비스에서 제외시킵니다.
      failureThreshold: 5
